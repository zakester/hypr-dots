;(function() {
  const runtime =
    typeof browser !== 'undefined' ? browser.runtime : chrome.runtime

  var validating = false

  /**
   *
   * Validates that ADFS partial key K1 is encrypted
   * with a public key generated by the client on login
   *
   */
  var validateSamlResponse = function() {
    var samlForm = document.forms[0]
    if (
      !validating &&
      samlForm &&
      typeof samlForm.action === 'string' &&
      samlForm.action.startsWith('https://accounts.lastpass.com') &&
      samlForm.SAMLResponse
    ) {
      validating = true
      var parentElement = samlForm.parentElement
      parentElement.removeChild(samlForm)
      runtime.sendMessage({ validateK1: samlForm.SAMLResponse.value }, function(
        isValid
      ) {
        if (isValid) {
          parentElement.appendChild(samlForm)
          samlForm.submit()
        }
      })
    }
  }

  /**
   * The goal here is to prevent the SAMLResponse form submission
   * so it can be validated and then submitted manually and we
   * try two different approaches to hopefully catch all the cases
   * 1. MutationObserver
   * 2. DOMContentLoaded
   */
  var observer = new MutationObserver(function() {
    if (document.body) {
      validateSamlResponse()
      observer.disconnect()
    }
  })
  observer.observe(document, { childList: true, subtree: true })
  document.addEventListener('DOMContentLoaded', validateSamlResponse)
  validateSamlResponse()

  /**
   * If we get to one of these pages send the URL to the legacy-module-federated-login code
   * to process the final token
   */
  const successPages = [
    'https://accounts.lastpass.com/auth/saml2/success',
    'https://accounts.lastpass.com/federated/oidcredirect.html'
  ]
  if (successPages.some(page => location.href.startsWith(page))) {
    runtime.sendMessage('processSuccess')
  }
})()
